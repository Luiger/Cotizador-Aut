const axios = require('axios');
const aiService = require('../services/aiService');
const telegramService = require('../services/telegramService');
const dbService = require('../services/dbService');
const pdfService = require('../services/pdfService');
const calendarService = require('../services/calendarService');
// GESTOR DE HISTORIAL DE CONVERSACI√ìN
const conversationHistory = {};

const TELEGRAM_API = `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}`;
let offset = 0; // Para llevar la cuenta de los mensajes ya procesados

// Funci√≥n principal que inicia el ciclo de polling
const startBot = async () => {
    console.log('ü§ñ Bot escuchando actualizaciones de Telegram...');
    setInterval(pollUpdates, 3000); // Revisa si hay nuevos mensajes cada 3 segundos
};

// Funci√≥n que consulta a la API de Telegram por nuevos mensajes
const pollUpdates = async () => {
    try {
        const { data } = await axios.get(`${TELEGRAM_API}/getUpdates`, {
            params: { offset: offset + 1, timeout: 2 } // timeout largo para long-polling
        });

        if (data.result.length > 0) {
            for (const update of data.result) {
                offset = update.update_id; // Actualizamos el offset
                await processUpdate(update); // Procesamos cada mensaje
            }
        }
    } catch (error) {
        console.error('Error en el polling de Telegram:', error.message);
    }
};

const processQuoteRequest = async (chatId, text) => {
    try {
        // OBTENER EL CAT√ÅLOGO
        const catalog = await dbService.getFullCatalog();
        if (catalog.length === 0) {
            await telegramService.sendMessage(chatId, '‚ö†Ô∏è Lo siento, no puedo acceder a nuestro cat√°logo en este momento.');
            return;
        }

        // --- L√ìGICA DE HISTORIAL ---
        // Recuperamos el historial para este chat o creamos uno nuevo si no existe.
        const userHistory = conversationHistory[chatId] || [];
        // A√±adimos el √∫ltimo mensaje del usuario al historial.
        userHistory.push({ role: 'user', parts: [{ text }] });

        // OBTENER LA RESPUESTA DEL ASISTENTE (AHORA CON HISTORIAL)
        const assistantResponse = await aiService.getAssistantResponse(userHistory, catalog);
        
        const { analisis_interno, respuesta_usuario } = assistantResponse;
        
        // A√±adimos la respuesta del asistente al historial para la pr√≥xima vez.
        userHistory.push({ role: 'model', parts: [{ text: respuesta_usuario }] });
        // Guardamos el historial actualizado.
        conversationHistory[chatId] = userHistory;

        // ENVIAR LA RESPUESTA AL USUARIO
        await telegramService.sendMessage(chatId, respuesta_usuario);

        // ACTUAR SEG√öN EL AN√ÅLISIS INTERNO QUE NOS DIO LA IA
        if (analisis_interno.accion === "COTIZAR") {
            // Si la acci√≥n es "COTIZAR", procedemos a buscar en la BD y calcular.
            // La IA ya nos dio el nombre exacto de la m√°quina, as√≠ que la b√∫squeda es confiable.
            const machine = await dbService.findMachineByName(analisis_interno.maquina);
            
            if (!machine) {
                // Este es un caso de seguridad, en caso de que la IA alucine un nombre de m√°quina.
                await telegramService.sendMessage(chatId, "Hmm, parece que hubo un error al encontrar los detalles de esa m√°quina en nuestro sistema. Perm√≠teme verificar y un asesor se pondr√° en contacto.");
                return;
            }

            // C√ÅLCULO DE LA COTIZACI√ìN
            const subtotal = parseFloat(machine.precio_semana); // Aseguramos que sea un n√∫mero
            const iva = subtotal * 0.16;
            const total = subtotal + iva;

            const quoteText = `
‚úÖ ¬°Aqu√≠ tienes el desglose de tu cotizaci√≥n!

**M√°quina:** ${machine.nombre_modelo}
**Descripci√≥n:** ${machine.descripcion}
**Duraci√≥n Solicitada:** ${analisis_interno.duracion}
---
**Subtotal:** $${subtotal.toFixed(2)} MXN
**IVA (16%):** $${iva.toFixed(2)} MXN
**Total:** **$${total.toFixed(2)} MXN**

*Este es un costo preliminar. En los siguientes pasos generar√© el PDF y agendar√© un recordatorio.*`;

            await telegramService.sendMessage(chatId, quoteText, 'Markdown');

            // Preparar el objeto de datos para los servicios de PDF y Calendario
            const quoteData = {
                machine: machine,
                duration: analisis_interno.duracion,
                subtotal: subtotal,
                iva: iva,
                total: total,
            };

            // Generar y enviar el PDF
            await telegramService.sendMessage(chatId, 'üìÑ Generando tu cotizaci√≥n en formato PDF, un momento por favor...');
            try {
                const pdfBuffer = await pdfService.createQuotePdf(quoteData);
                await telegramService.sendDocument(chatId, pdfBuffer, 'Cotizacion_Maquinaria_Pro.pdf');
            } catch (pdfError) {
                console.error(`[Chat ID: ${chatId}] Error al generar o enviar el PDF:`, pdfError);
                await telegramService.sendMessage(chatId, 'Tuve un problema al generar el documento PDF, pero no te preocupes, un asesor ya tiene tus datos para el seguimiento.');
            }

            // Crear el evento en Google Calendar
            await telegramService.sendMessage(chatId, 'üóìÔ∏è Agendando un recordatorio para nuestro equipo de ventas...');
            const eventCreated = await calendarService.createFollowUpEvent(quoteData, chatId);

            if (eventCreated) {
                await telegramService.sendMessage(chatId, '‚úÖ ¬°Listo! Tu cotizaci√≥n ha sido enviada en PDF y nuestro equipo ha sido notificado para darte el mejor seguimiento. ¬°Gracias por tu inter√©s!');
            } else {
                await telegramService.sendMessage(chatId, '‚úÖ Tu cotizaci√≥n ha sido enviada. Tuvimos un problema al agendar el recordatorio, pero un asesor se pondr√° en contacto a la brevedad.');
            }

        }

    } catch (error) {
        console.error(`Error grave en el flujo de cotizaci√≥n para el chat ${chatId}:`, error);
        await telegramService.sendMessage(chatId, '‚ö†Ô∏è Ups, ocurri√≥ un error inesperado al procesar tu solicitud. Nuestro equipo t√©cnico ha sido notificado.');
    }
};

// Funci√≥n que decide qu√© hacer con cada mensaje (update)
const processUpdate = async (update) => {
    const message = update.message;
    if (!message || message.text?.startsWith('/')) return;
    const chatId = message.chat.id;

    try {
        let userText;
        if (message.voice) {
            console.log(`[Chat ID: ${chatId}] Recibido mensaje de voz.`);
            await telegramService.sendMessage(chatId, 'üéôÔ∏è Transcribiendo tu audio...');
            const fileLink = await telegramService.getFileLink(message.voice.file_id);
            userText = await aiService.transcribeAudio(fileLink);
            await telegramService.sendMessage(chatId, `Texto transcrito: "_${userText}_"`, 'Markdown');
        } else if (message.text) {
            console.log(`[Chat ID: ${chatId}] Recibido mensaje de texto: "${message.text}"`);
            userText = message.text;
        }
        
        if (userText) {
            // Llamamos a nuestra nueva funci√≥n de l√≥gica de negocio
            await processQuoteRequest(chatId, userText);
        }

    } catch (error) {
        console.error(`Error procesando mensaje para el chat ${chatId}:`, error);
        await telegramService.sendMessage(chatId, 'Lo siento, no pude procesar tu mensaje. Por favor, intenta de nuevo.');
    }
};
module.exports = { startBot };